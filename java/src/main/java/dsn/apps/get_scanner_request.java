// Copyright (c) 2017, Xiaomi, Inc.  All rights reserved.
// This source code is licensed under the Apache License Version 2.0, which
// can be found in the LICENSE file in the root directory of this source tree.

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dsn.apps;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-10-17")
public class get_scanner_request implements org.apache.thrift.TBase<get_scanner_request, get_scanner_request._Fields>, java.io.Serializable, Cloneable, Comparable<get_scanner_request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_scanner_request");

  private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("start_key", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField STOP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("stop_key", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField START_INCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_inclusive", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField STOP_INCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("stop_inclusive", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batch_size", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new get_scanner_requestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new get_scanner_requestTupleSchemeFactory());
  }

  public dsn.base.blob start_key; // required
  public dsn.base.blob stop_key; // required
  public boolean start_inclusive; // required
  public boolean stop_inclusive; // required
  public int batch_size; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_KEY((short)1, "start_key"),
    STOP_KEY((short)2, "stop_key"),
    START_INCLUSIVE((short)3, "start_inclusive"),
    STOP_INCLUSIVE((short)4, "stop_inclusive"),
    BATCH_SIZE((short)5, "batch_size");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_KEY
          return START_KEY;
        case 2: // STOP_KEY
          return STOP_KEY;
        case 3: // START_INCLUSIVE
          return START_INCLUSIVE;
        case 4: // STOP_INCLUSIVE
          return STOP_INCLUSIVE;
        case 5: // BATCH_SIZE
          return BATCH_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_INCLUSIVE_ISSET_ID = 0;
  private static final int __STOP_INCLUSIVE_ISSET_ID = 1;
  private static final int __BATCH_SIZE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("start_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dsn.base.blob.class)));
    tmpMap.put(_Fields.STOP_KEY, new org.apache.thrift.meta_data.FieldMetaData("stop_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dsn.base.blob.class)));
    tmpMap.put(_Fields.START_INCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("start_inclusive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STOP_INCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("stop_inclusive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batch_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_scanner_request.class, metaDataMap);
  }

  public get_scanner_request() {
  }

  public get_scanner_request(
    dsn.base.blob start_key,
    dsn.base.blob stop_key,
    boolean start_inclusive,
    boolean stop_inclusive,
    int batch_size)
  {
    this();
    this.start_key = start_key;
    this.stop_key = stop_key;
    this.start_inclusive = start_inclusive;
    setStart_inclusiveIsSet(true);
    this.stop_inclusive = stop_inclusive;
    setStop_inclusiveIsSet(true);
    this.batch_size = batch_size;
    setBatch_sizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public get_scanner_request(get_scanner_request other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStart_key()) {
      this.start_key = new dsn.base.blob(other.start_key);
    }
    if (other.isSetStop_key()) {
      this.stop_key = new dsn.base.blob(other.stop_key);
    }
    this.start_inclusive = other.start_inclusive;
    this.stop_inclusive = other.stop_inclusive;
    this.batch_size = other.batch_size;
  }

  public get_scanner_request deepCopy() {
    return new get_scanner_request(this);
  }

  @Override
  public void clear() {
    this.start_key = null;
    this.stop_key = null;
    setStart_inclusiveIsSet(false);
    this.start_inclusive = false;
    setStop_inclusiveIsSet(false);
    this.stop_inclusive = false;
    setBatch_sizeIsSet(false);
    this.batch_size = 0;
  }

  public dsn.base.blob getStart_key() {
    return this.start_key;
  }

  public get_scanner_request setStart_key(dsn.base.blob start_key) {
    this.start_key = start_key;
    return this;
  }

  public void unsetStart_key() {
    this.start_key = null;
  }

  /** Returns true if field start_key is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_key() {
    return this.start_key != null;
  }

  public void setStart_keyIsSet(boolean value) {
    if (!value) {
      this.start_key = null;
    }
  }

  public dsn.base.blob getStop_key() {
    return this.stop_key;
  }

  public get_scanner_request setStop_key(dsn.base.blob stop_key) {
    this.stop_key = stop_key;
    return this;
  }

  public void unsetStop_key() {
    this.stop_key = null;
  }

  /** Returns true if field stop_key is set (has been assigned a value) and false otherwise */
  public boolean isSetStop_key() {
    return this.stop_key != null;
  }

  public void setStop_keyIsSet(boolean value) {
    if (!value) {
      this.stop_key = null;
    }
  }

  public boolean isStart_inclusive() {
    return this.start_inclusive;
  }

  public get_scanner_request setStart_inclusive(boolean start_inclusive) {
    this.start_inclusive = start_inclusive;
    setStart_inclusiveIsSet(true);
    return this;
  }

  public void unsetStart_inclusive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_INCLUSIVE_ISSET_ID);
  }

  /** Returns true if field start_inclusive is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_inclusive() {
    return EncodingUtils.testBit(__isset_bitfield, __START_INCLUSIVE_ISSET_ID);
  }

  public void setStart_inclusiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_INCLUSIVE_ISSET_ID, value);
  }

  public boolean isStop_inclusive() {
    return this.stop_inclusive;
  }

  public get_scanner_request setStop_inclusive(boolean stop_inclusive) {
    this.stop_inclusive = stop_inclusive;
    setStop_inclusiveIsSet(true);
    return this;
  }

  public void unsetStop_inclusive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOP_INCLUSIVE_ISSET_ID);
  }

  /** Returns true if field stop_inclusive is set (has been assigned a value) and false otherwise */
  public boolean isSetStop_inclusive() {
    return EncodingUtils.testBit(__isset_bitfield, __STOP_INCLUSIVE_ISSET_ID);
  }

  public void setStop_inclusiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOP_INCLUSIVE_ISSET_ID, value);
  }

  public int getBatch_size() {
    return this.batch_size;
  }

  public get_scanner_request setBatch_size(int batch_size) {
    this.batch_size = batch_size;
    setBatch_sizeIsSet(true);
    return this;
  }

  public void unsetBatch_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID);
  }

  /** Returns true if field batch_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBatch_size() {
    return EncodingUtils.testBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID);
  }

  public void setBatch_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_KEY:
      if (value == null) {
        unsetStart_key();
      } else {
        setStart_key((dsn.base.blob)value);
      }
      break;

    case STOP_KEY:
      if (value == null) {
        unsetStop_key();
      } else {
        setStop_key((dsn.base.blob)value);
      }
      break;

    case START_INCLUSIVE:
      if (value == null) {
        unsetStart_inclusive();
      } else {
        setStart_inclusive((Boolean)value);
      }
      break;

    case STOP_INCLUSIVE:
      if (value == null) {
        unsetStop_inclusive();
      } else {
        setStop_inclusive((Boolean)value);
      }
      break;

    case BATCH_SIZE:
      if (value == null) {
        unsetBatch_size();
      } else {
        setBatch_size((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_KEY:
      return getStart_key();

    case STOP_KEY:
      return getStop_key();

    case START_INCLUSIVE:
      return isStart_inclusive();

    case STOP_INCLUSIVE:
      return isStop_inclusive();

    case BATCH_SIZE:
      return getBatch_size();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_KEY:
      return isSetStart_key();
    case STOP_KEY:
      return isSetStop_key();
    case START_INCLUSIVE:
      return isSetStart_inclusive();
    case STOP_INCLUSIVE:
      return isSetStop_inclusive();
    case BATCH_SIZE:
      return isSetBatch_size();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof get_scanner_request)
      return this.equals((get_scanner_request)that);
    return false;
  }

  public boolean equals(get_scanner_request that) {
    if (that == null)
      return false;

    boolean this_present_start_key = true && this.isSetStart_key();
    boolean that_present_start_key = true && that.isSetStart_key();
    if (this_present_start_key || that_present_start_key) {
      if (!(this_present_start_key && that_present_start_key))
        return false;
      if (!this.start_key.equals(that.start_key))
        return false;
    }

    boolean this_present_stop_key = true && this.isSetStop_key();
    boolean that_present_stop_key = true && that.isSetStop_key();
    if (this_present_stop_key || that_present_stop_key) {
      if (!(this_present_stop_key && that_present_stop_key))
        return false;
      if (!this.stop_key.equals(that.stop_key))
        return false;
    }

    boolean this_present_start_inclusive = true;
    boolean that_present_start_inclusive = true;
    if (this_present_start_inclusive || that_present_start_inclusive) {
      if (!(this_present_start_inclusive && that_present_start_inclusive))
        return false;
      if (this.start_inclusive != that.start_inclusive)
        return false;
    }

    boolean this_present_stop_inclusive = true;
    boolean that_present_stop_inclusive = true;
    if (this_present_stop_inclusive || that_present_stop_inclusive) {
      if (!(this_present_stop_inclusive && that_present_stop_inclusive))
        return false;
      if (this.stop_inclusive != that.stop_inclusive)
        return false;
    }

    boolean this_present_batch_size = true;
    boolean that_present_batch_size = true;
    if (this_present_batch_size || that_present_batch_size) {
      if (!(this_present_batch_size && that_present_batch_size))
        return false;
      if (this.batch_size != that.batch_size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_start_key = true && (isSetStart_key());
    list.add(present_start_key);
    if (present_start_key)
      list.add(start_key);

    boolean present_stop_key = true && (isSetStop_key());
    list.add(present_stop_key);
    if (present_stop_key)
      list.add(stop_key);

    boolean present_start_inclusive = true;
    list.add(present_start_inclusive);
    if (present_start_inclusive)
      list.add(start_inclusive);

    boolean present_stop_inclusive = true;
    list.add(present_stop_inclusive);
    if (present_stop_inclusive)
      list.add(stop_inclusive);

    boolean present_batch_size = true;
    list.add(present_batch_size);
    if (present_batch_size)
      list.add(batch_size);

    return list.hashCode();
  }

  @Override
  public int compareTo(get_scanner_request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(other.isSetStart_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, other.start_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStop_key()).compareTo(other.isSetStop_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStop_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop_key, other.stop_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_inclusive()).compareTo(other.isSetStart_inclusive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_inclusive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_inclusive, other.start_inclusive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStop_inclusive()).compareTo(other.isSetStop_inclusive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStop_inclusive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop_inclusive, other.stop_inclusive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatch_size()).compareTo(other.isSetBatch_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatch_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch_size, other.batch_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("get_scanner_request(");
    boolean first = true;

    sb.append("start_key:");
    if (this.start_key == null) {
      sb.append("null");
    } else {
      sb.append(this.start_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stop_key:");
    if (this.stop_key == null) {
      sb.append("null");
    } else {
      sb.append(this.stop_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_inclusive:");
    sb.append(this.start_inclusive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stop_inclusive:");
    sb.append(this.stop_inclusive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("batch_size:");
    sb.append(this.batch_size);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (start_key != null) {
      start_key.validate();
    }
    if (stop_key != null) {
      stop_key.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class get_scanner_requestStandardSchemeFactory implements SchemeFactory {
    public get_scanner_requestStandardScheme getScheme() {
      return new get_scanner_requestStandardScheme();
    }
  }

  private static class get_scanner_requestStandardScheme extends StandardScheme<get_scanner_request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, get_scanner_request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.start_key = new dsn.base.blob();
              struct.start_key.read(iprot);
              struct.setStart_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STOP_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stop_key = new dsn.base.blob();
              struct.stop_key.read(iprot);
              struct.setStop_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_INCLUSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.start_inclusive = iprot.readBool();
              struct.setStart_inclusiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STOP_INCLUSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.stop_inclusive = iprot.readBool();
              struct.setStop_inclusiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batch_size = iprot.readI32();
              struct.setBatch_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, get_scanner_request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.start_key != null) {
        oprot.writeFieldBegin(START_KEY_FIELD_DESC);
        struct.start_key.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.stop_key != null) {
        oprot.writeFieldBegin(STOP_KEY_FIELD_DESC);
        struct.stop_key.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_INCLUSIVE_FIELD_DESC);
      oprot.writeBool(struct.start_inclusive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_INCLUSIVE_FIELD_DESC);
      oprot.writeBool(struct.stop_inclusive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
      oprot.writeI32(struct.batch_size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class get_scanner_requestTupleSchemeFactory implements SchemeFactory {
    public get_scanner_requestTupleScheme getScheme() {
      return new get_scanner_requestTupleScheme();
    }
  }

  private static class get_scanner_requestTupleScheme extends TupleScheme<get_scanner_request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, get_scanner_request struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStart_key()) {
        optionals.set(0);
      }
      if (struct.isSetStop_key()) {
        optionals.set(1);
      }
      if (struct.isSetStart_inclusive()) {
        optionals.set(2);
      }
      if (struct.isSetStop_inclusive()) {
        optionals.set(3);
      }
      if (struct.isSetBatch_size()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStart_key()) {
        struct.start_key.write(oprot);
      }
      if (struct.isSetStop_key()) {
        struct.stop_key.write(oprot);
      }
      if (struct.isSetStart_inclusive()) {
        oprot.writeBool(struct.start_inclusive);
      }
      if (struct.isSetStop_inclusive()) {
        oprot.writeBool(struct.stop_inclusive);
      }
      if (struct.isSetBatch_size()) {
        oprot.writeI32(struct.batch_size);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, get_scanner_request struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.start_key = new dsn.base.blob();
        struct.start_key.read(iprot);
        struct.setStart_keyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stop_key = new dsn.base.blob();
        struct.stop_key.read(iprot);
        struct.setStop_keyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.start_inclusive = iprot.readBool();
        struct.setStart_inclusiveIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stop_inclusive = iprot.readBool();
        struct.setStop_inclusiveIsSet(true);
      }
      if (incoming.get(4)) {
        struct.batch_size = iprot.readI32();
        struct.setBatch_sizeIsSet(true);
      }
    }
  }

}

